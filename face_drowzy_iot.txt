# Importing necessary libraries
import cv2
import numpy as np
import dlib
from imutils import face_utils
import serial
import time

# Initialize Serial Communication
try:
    s = serial.Serial('COM3', 9600, timeout=1)
except serial.SerialException:
    print("Serial port not found. Continuing without serial communication.")
    s = None

# Initializing the camera
cap = cv2.VideoCapture(0)
time.sleep(2)  # Allow the camera to warm up

# Initializing the face detector and landmark detector
hog_face_detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("C:/Users/ishuk/OneDrive/Desktop/DrowsinessDtection_master/shape_predictor_68_face_landmarks.dat")

# Status tracking
sleep = 0
drowsy = 0
active = 0
status = ""
color = (0, 0, 0)

def compute(ptA, ptB):
    return np.linalg.norm(ptA - ptB)

def blinked(a, b, c, d, e, f):
    up = compute(b, d) + compute(c, e)
    down = compute(a, f)
    ratio = up / (2.0 * down)

    if ratio > 0.25:
        return 2  # Open eyes
    elif 0.21 <= ratio <= 0.25:
        return 1  # Drowsy
    else:
        return 0  # Closed eyes

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        print("Failed to capture frame. Exiting...")
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = hog_face_detector(gray)

    for face in faces:
        x1, y1, x2, y2 = face.left(), face.top(), face.right(), face.bottom()
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

        landmarks = predictor(gray, face)
        landmarks = face_utils.shape_to_np(landmarks)

        left_blink = blinked(landmarks[36], landmarks[37], landmarks[38], landmarks[41], landmarks[40], landmarks[39])
        right_blink = blinked(landmarks[42], landmarks[43], landmarks[44], landmarks[47], landmarks[46], landmarks[45])

        if left_blink == 0 or right_blink == 0:
            sleep += 1
            drowsy = 0
            active = 0
            if sleep > 6:
                if s:
                    s.write(b'a')  # Sleep detected -> Hazard lights + buzzer + slow down
                status = "SLEEPING !!!"
                color = (0, 0, 255)

        elif left_blink == 1 or right_blink == 1:
            sleep = 0
            active = 0
            drowsy += 1
            if drowsy > 6:
                if s:
                    s.write(b'c')  # Drowsiness detected -> Only buzzer
                status = "Drowsy !"
                color = (0, 0, 255)

        else:
            sleep = 0
            drowsy = 0
            active += 1
            if active > 6:
                if s:
                    s.write(b'b')  # Active -> Turn everything off
                status = "Active"
                color = (0, 255, 0)

        cv2.putText(frame, status, (100, 100), cv2.FONT_HERSHEY_SIMPLEX, 1.2, color, 3)

        for (x, y) in landmarks:
            cv2.circle(frame, (x, y), 1, (255, 255, 255), -1)

    cv2.imshow("Drowsiness Detector", frame)

    key = cv2.waitKey(1)
    if key == 27:  # ESC key
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
if s:
    s.close()

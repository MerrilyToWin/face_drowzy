import cv2
import numpy as np
import dlib
import winsound 
from imutils import face_utils
from twilio.rest import Client  
import pyttsx3 

# Twilio Credentials (Replace with your actual Twilio credentials)
TWILIO_SID = ""
TWILIO_AUTH_TOKEN = ""
TWILIO_PHONE_NUMBER = ""
PARENT_PHONE_NUMBER = ""

cap = cv2.VideoCapture(0)

# Initializing the face detector and landmark detector
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")

# Status tracking variables
sleep = 0
drowsy = 0
active = 0
status = ""
color = (0, 0, 0)

# Notification tracking variables
drowsy_count = 0
notified_buzzer = False
notified_sms = False
notified_call = False

# Twilio client
client = Client(TWILIO_SID, TWILIO_AUTH_TOKEN)

# Text-to-Speech Engine
engine = pyttsx3.init()
engine.setProperty('rate', 150)

def compute(ptA, ptB):
    return np.linalg.norm(ptA - ptB)

def blinked(a, b, c, d, e, f):
    up = compute(b, d) + compute(c, e)
    down = compute(a, f)
    ratio = up / (2.0 * down)

    if ratio > 0.25:
        return 2
    elif ratio > 0.21 and ratio <= 0.25:
        return 1
    else:
        return 0

def send_sms():
    message = client.messages.create(
        body="Alert! The driver is feeling drowsy. Please check immediately.",
        from_=TWILIO_PHONE_NUMBER,
        to=PARENT_PHONE_NUMBER
    )
    print("SMS Sent:", message.sid)

def make_call():
    call = client.calls.create(
        twiml='<Response><Say>The DRIVER IS FEELING DROWSY! Please check immediately.</Say></Response>',
        from_=TWILIO_PHONE_NUMBER,
        to=PARENT_PHONE_NUMBER
    )
    print("Call Initiated:", call.sid)

while True:
    _, frame = cap.read()
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    faces = detector(gray)
    for face in faces:
        x1, y1, x2, y2 = face.left(), face.top(), face.right(), face.bottom()
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

        landmarks = predictor(gray, face)
        landmarks = face_utils.shape_to_np(landmarks)

        left_blink = blinked(landmarks[36], landmarks[37], landmarks[38], landmarks[41], landmarks[40], landmarks[39])
        right_blink = blinked(landmarks[42], landmarks[43], landmarks[44], landmarks[47], landmarks[46], landmarks[45])

        if left_blink == 0 or right_blink == 0:
            sleep += 1
            drowsy = 0
            active = 0
            if sleep > 6:
                status = "SLEEPING !!!"
                drowsy_count += 1
                sleep = 0 

        elif left_blink == 1 or right_blink == 1:
            sleep = 0
            active = 0
            drowsy += 1
            if drowsy > 6:
                status = "Drowsy !"
                drowsy_count += 1
                drowsy = 0

        else:
            drowsy = 0
            sleep = 0
            active += 1
            if active > 6:
                status = "Active !!!"
                color = (0, 255, 0)
                active = 0 

        # Notification logic
        if drowsy_count == 1 and not notified_buzzer:
            print("Buzzer Warning!")
            winsound.Beep(1000, 1000)  # 1000 Hz for 1 sec
            notified_buzzer = True  # Prevent repeated buzzing

        elif drowsy_count == 2 and not notified_sms:
            print("Sending SMS to Parents...")
            send_sms()
            notified_sms = True

        elif drowsy_count > 3:
            print("Calling Parents...")
            make_call()
            for _ in range(3):  # Speak warning 3 times
                engine.say("The DRIVER IS FEELING DROWSY")
                engine.runAndWait()
            drowsy_count = 0  # Reset count after calling
            notified_buzzer = False  # Reset buzzer flag for next cycle

        cv2.putText(frame, status, (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 1.2, color, 3)

    cv2.imshow("Frame", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
